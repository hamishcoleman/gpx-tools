#!/usr/bin/env perl
use warnings;
use strict;
#
# Load a splitlist and a series of min/max files, output the dependancy list
# of which minmax source files are needed for each splitlist output bucket
#

use File::Spec;

# allow the libs to be in the bin dir
use FindBin;
use lib File::Spec->catdir($FindBin::RealBin,"lib");

use IO::File;

use SplitList::Time;

# TODO - use getopt to parse cmdline
# Extract any search path
my @path;
if ($ARGV[0] =~ m/^--path=(.*)/) {
    shift @ARGV;
    for my $entry (split(':',$1)) {
        # ensure we resolve any home directory tilde expansions
        push @path, glob($entry);
    }
} else {
    push @path, ".";
}

# Given the base filename, look on the search path for a
# matching real filename and output that.
# die on failure
sub findfile {
    my $basefilename = shift;

    if (File::Spec->file_name_is_absolute($basefilename)) {
        # obsolete - full path name
        if ( -e $basefilename ) {
            return $basefilename;
        }
    }

    for my $path (@path) {
        my $tryname = File::Spec->catfile($path,$basefilename);
        if ( -e $tryname ) {
            return $tryname;
        }
        $tryname .= '.xz';
        if ( -e $tryname ) {
            return $tryname;
        }
    }

    die("Could not find $basefilename in @path");
}


my $splitlist = SplitList::Time->new();
my $split_filename = shift @ARGV;
my $split_fh = IO::File->new($split_filename, "r");
$splitlist->parse_fd($split_fh);

my $deps = {};

for my $file (@ARGV) {
    my $fh;
    if ( $file =~ m/\.gz$/ ) {
        $fh = IO::File->new("gzip -dc <'$file' |");
    } elsif ( $file =~ m/\.xz$/ ) {
        $fh = IO::File->new("xz -dc <'$file' |");
    } else {
        $fh = IO::File->new($file,"r");
    }
    if (!defined $fh) {
        die "could not open $file: $!";
    }

    my $s = <$fh>;

    # skip empty files (TODO: read more lines?)
    next if (!$s);

    chomp($s);

    if ($s =~ m/^(\S+) - (\S+) (.*)$/) {
        my $min = $1;
        my $max = $2;
        my $basefilename = $3;

        my $inputfilename = findfile($basefilename);

        my @buckets = $splitlist->lookup_timerange($min,$max);

        # if debug
        #   printf("minmax file: %s\n",$file);
        #   print("\t", join(", ", @buckets), "\n");
   
        for my $output (@buckets) {
            push @{$deps->{$output}}, $inputfilename;
        }
    } else {
        warn("Could not read $file\n");
    }
}

print("# Automatically generated dependancy list\n");
for my $output (sort(keys(%{$deps}))) {
    printf("%s: %s\n",
        $output,
        join(" ", @{$deps->{$output}}),
    );
}
